name: Build and deploy Angular app with Node backend to Azure Web App - celestradepro

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      # Install Angular CLI and frontend dependencies
      - name: Install Angular CLI and frontend dependencies
        run: |
          cd celestradepro
          npm install -g @angular/cli
          npm install -f
          npm install ws@latest @types/ws@latest -f

      # Modify TypeScript Files (workaround for specific issues)
      - name: Modify TypeScript Files
        run: |
          find . -type f -name '*.ts' -exec sed -i '/server?: HTTPServer<V> | HTTPSServer<V> | undefined;/s/^/\/\/ @ts-ignore\n/' {} \;

      # Build Angular app
      - name: Build Angular app
        working-directory: ./celestradepro
        run: |
          export NODE_OPTIONS="--max-old-space-size=4096" # 4GB of memory
          ng build 

      # Install backend dependencies
      - name: Install backend dependencies
        working-directory: ./celestradepro/Backend
        run: |
          npm install -f
          npm install mongoose -f

      # Package frontend and backend together
      - name: Prepare deployment package
        run: |
          mkdir deployment_package
          cp -r celestradepro/www deployment_package/frontend
          cp -r celestradepro/Backend/* deployment_package/backend
          cp celestradepro/package.json deployment_package/
          cp celestradepro/server.js deployment_package/

      # Upload deployment package as an artifact
      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment_package/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'staging'

    steps:
      # Download deployment package
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: deployment_package/

      # List files in deployment package (for troubleshooting)
      - name: List files in deployment package
        run: ls -R deployment_package/

      # Deploy to Azure Web App (staging slot)
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'CelesContainerWebApp' # The Azure App Service name
          slot-name: 'staging'            # The slot name for deployment
          package: deployment_package/   # Path to the combined deployment package
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }} # Secret for staging slot
