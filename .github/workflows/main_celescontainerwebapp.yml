name: Deploy to Azure App Service

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Frontend deployment steps
      - name: Set up Node.js for frontend
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: Install Angular CLI and frontend dependencies
        run: |
          cd celestradepro
          npm install -g @angular/cli
          npm install
          npm install ws@latest @types/ws@latest
          npm install highcharts --save

      - name: Build frontend
        run: |
          cd celestradepro
          npm install webpack --save-dev
          npm run build --prod --skipLibCheck  # Skip type checking for libraries

      # Backend deployment steps
      - name: Set up Node.js for backend
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'

      - name: Install backend dependencies
        run: |
          cd celestradepro/Backend
          rm -rf node_modules package-lock.json  # Ensure a clean install
          npm install
          npm install typescript@latest --save-dev
          npm install mongodb --save
          npm install dotenv --save
          npm install express --save
          npm install --save @types/node @types/express

      - name: Modify TypeScript files to ignore ws errors
        run: |
          cd celestradepro
          find . -type f -name '*.ts' -exec sed -i '/server?: HTTPServer<V> | HTTPSServer<V> | undefined;/s/^/\/\/ @ts-ignore\n/' {} \;

      - name: Fix TypeScript issues
        run: |
          cd celestradepro/Backend
          npx tsc --init  # Ensure tsconfig.json exists
          sed -i 's/"skipLibCheck": false/"skipLibCheck": true/' tsconfig.json  # Add skipLibCheck

      - name: Build backend
        run: |
          cd celestradepro/Backend
          npm run build  # Build using TypeScript, output to the 'www' folder

      - name: Package backend for deployment
        run: |
          cd celestradepro/Backend
          zip -r backend.zip www  # Package the 'www' folder containing the backend output

      - name: Deploy Backend to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'CelesContainerWebApp'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: 'celestradepro/Backend/backend.zip'
          verbose: true

      # Frontend deployment (if applicable)
      - name: Deploy Frontend to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'CelesContainerWebApp'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: 'celestradepro/www'  # Path to the frontend build folder
