name: Deploy to Azure App Service

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # --- Checkout the repository ---
      - name: Checkout code
        uses: actions/checkout@v2

      # --- Set Node.js Version for Both Frontend and Backend ---
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.x' # Unified Node.js version for both frontend and backend

      # --- Frontend Deployment ---
      - name: Install Angular CLI and dependencies
        run: |
          cd celestradepro
          npm install -g @angular/cli # Install Angular CLI globally
          npm install # Install frontend dependencies
          npm install ws@7.4.6 @types/ws@7.4.3 highcharts --save # Install necessary dependencies

      - name: Modify TypeScript Files (Optional)
        run: |
          cd celestradepro
          find . -type f -name '*.ts' -exec sed -i '/server?: HTTPServer<V> | HTTPSServer<V> | undefined;/s/^/\/\/ @ts-ignore\n/' {} \; # Ignore the TypeScript error related to HTTPServer

      - name: Build frontend
        run: |
          cd celestradepro
          ng build --prod # Build the Angular app for production

      - name: Deploy Frontend to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'CelesContainerWebApp' # Azure app name
          slot-name: 'Production' # Deployment slot
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }} # Azure publish profile secret
          package: 'celestradepro/dist/celestradepro' # Correct path to the build folder

      # --- Backend Deployment ---
      - name: Install backend dependencies
        run: |
          cd celestradepro/Backend
          npm install # Install backend dependencies
          npm install mongodb ws@7.4.6 @types/ws@7.4.3 --save # Install MongoDB and ws dependencies

      - name: Validate TypeScript configuration
        run: |
          cd celestradepro/Backend
          npx tsc --noEmit # Check for TypeScript errors without emitting files

      - name: Build backend
        run: |
          cd celestradepro/Backend
          npm run build # Ensure proper build script (tsc or any custom build)

      - name: Deploy Backend to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'CelesContainerWebApp' # Azure app name
          slot-name: 'Production' # Deployment slot
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }} # Azure publish profile secret
          package: 'celestradepro/Backend/build' # Correct path to the backend build folder
