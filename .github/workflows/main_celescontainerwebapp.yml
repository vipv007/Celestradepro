name: Build and Deploy Angular & Node.js App to Azure Web App - Celestradepro

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      # 3. Install Angular CLI and Frontend Dependencies
      - name: Install Angular CLI and frontend dependencies
        run: |
          cd Celestradepro
          npm install -g @angular/cli
          npm install -f
          npm install ws@latest @types/ws@latest -f

      # 4. Modify TypeScript Files for Compatibility
      - name: Modify TypeScript Files
        run: |
          find . -type f -name '*.ts' -exec sed -i '/server?: HTTPServer<V> | HTTPSServer<V> | undefined;/s/^/\/\/ @ts-ignore\n/' {} \;

      # 5. Build Angular Application
      - name: Build Angular app
        working-directory: ./Celestradepro
        run: |
          export NODE_OPTIONS="--max-old-space-size=4096"
          ng build --output-path=www

      # 6. Upload Frontend Artifact
      - name: Upload Angular artifact
        uses: actions/upload-artifact@v4
        with:
          name: angular-app
          path: Celestradepro/www

      # 7. Install Backend Dependencies
      - name: Install backend dependencies
        working-directory: ./Celestradepro/celestradepro/Backend
        run: |
          npm install -f
          npm install mongoose -f
          npm install socket.io -f  # Ensure socket.io is installed

      # 8. Upload Backend Artifact
      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-app
          path: Celestradepro/celestradepro/Backend

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'staging'

    steps:
      # 1. Download Frontend Artifact
      - name: Download Angular artifact
        uses: actions/download-artifact@v4
        with:
          name: angular-app
          path: www

      # 2. Download Backend Artifact
      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-app
          path: Backend

      # 3. List Files in Deployment Directory (for debugging)
      - name: List deployment directory files
        run: ls -R .

      # 4. Deploy Angular to Azure Web App
      - name: Deploy Angular app to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'CelesContainerWebApp'
          slot-name: 'staging'
          package: www
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}

      # 5. Deploy Backend to Azure Web App
      - name: Deploy Backend app to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'CelesBackendWebApp'
          slot-name: 'staging'
          package: Backend
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}

      # 6. Start Backend Server
      - name: Start Backend Server
        working-directory: ./Backend
        run: |
          echo "Starting backend server..."
          npm install
          npm install mongoose socket.io
          nohup node server.js > server.log 2>&1 &  # Run backend in the background
          tail -f server.log  # Stream logs for debugging
        env:
          AZURE_COSMOS_CONNECTIONSTRING: "mongodb://celescontainerwebapp-server:Cd8bsmtPGb944jUTWSF6f03i9ZyuoYpKSNd14ZX7rrL5hM9yzcdZF6WidOZABiakigan29ihvSGtACDbgtLJdg==@celescontainerwebapp-server.mongo.cosmos.azure.com:10255/?ssl=true&retrywrites=false"
          DB_NAME: 'test'
          PORT: 443
