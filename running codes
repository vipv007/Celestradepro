FROM node:16 as build
 
# Set the working directory in the container
WORKDIR /app

# Copy the package.json and package-lock.json from the Angular app directory to the container
COPY ./celestradepro/package*.json ./

# Install dependencies
RUN npm install

# Copy the entire Angular app source code from the Angular app directory to the container
COPY ./celestradepro .

# Set the Node.js memory limit
ENV NODE_OPTIONS=--max_old_space_size=4096

# Build the Angular app
RUN npm run build -- --output-path=dist

# Use a smaller base image to serve the Angular app
FROM node:16

# Install a simple HTTP server to serve the Angular app
RUN npm install -g http-server

# Set the working directory in the container
WORKDIR /app

# Copy the built Angular app from the build stage to the container
COPY --from=build /app/dist .

# Expose the port your app will listen on (e.g., 8080)
EXPOSE 4200:4200

# Start the HTTP server to serve your Angular app
CMD ["http-server", "-p", "4200"]



name: Build, Test, and Deploy Angular

on:
  push:
    branches:
      - main


jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install Dependencies
        run: |
          npm install
          npm install highcharts
          npm uninstall igniteui-angular-charts igniteui-angular-core
          npm install igniteui-angular-charts igniteui-angular-core
        working-directory: ./celestradepro

      # - name: Install Jest
      #   run: |
      #     npm install --save-dev jest @types/jest jest-preset-angular
      #   working-directory: ./celestradepro

      # - name: Run Jest Tests
      #   run: npm test
      #  # env:
      #   # CI: true

      - name: Modify TypeScript Files
        run: |
          find . -type f -name '*.ts' -exec sed -i '/server?: HTTPServer<V> | HTTPSServer<V> | undefined;/s/^/\/\/ @ts-ignore\n/' {} \;

      - name: Build Angular App
        run: |
          export NODE_OPTIONS=--max_old_space_size=4096
          npm run build
        working-directory: ./celestradepro
        env:
          NG_BUILD_OPTIMIZATION: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker Image
        run: |
          docker build -t vipv/kuber:${{ github.run_number }} -f ./Dockerfile .
      
      - name: Log in to Docker Hub
        run: |
          docker login -u vipv -p 9092897730

      - name: Push Docker Image
        run: |
          docker push vipv/kuber:${{ github.run_number }}

      - name: Run Docker Container
        run: |
          docker run -d -p 4200:4200 vipv/kuber:${{ github.run_number }}